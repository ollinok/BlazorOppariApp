@using DatabaseLib
@using BlazorOppari.Data
@using Microsoft.Extensions.Configuration
@using System.Timers
@using System.Linq
@using System.Diagnostics

@inject ISqlAccess _sql
@inject IConfiguration _config


@if (countdown != 0)
{
    <p style="font-size: 40px">@countdown</p>
}
else
{
    <p style="font-size: 40px">@currentWord</p>
}

@if (!gameOver)
{
    <!-- Selitä bindit ja tuo onkeyup valinta -->
    <input style="height: 35px;margin-bottom: 1rem;" @bind="wordGuess" @bind:event="oninput" @onkeyup="@CheckGuess" />
}
else
{
    <p style="height: 35px">Nice job!</p>
}

@code
{
    private static System.Timers.Timer timer;
    private Stopwatch stopwatch = new Stopwatch();

    private List<WordModel> words;
    private string wordGuess { get; set; }
    private string currentWord;
    private int wordIndex = 1;

    private int countdown = 3;
    private bool gameOver;

    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from word";

        words = await _sql.LoadSqlData<WordModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

        SetCountdownTimer();
    }

    private void CheckGuess()
    {
        if (wordGuess == currentWord)
        {
            wordGuess = "";
            GetWord();
            InvokeAsync(StateHasChanged);
        }
    }

    private void GetWord()
    {
        if (wordIndex > words.Count)
        {
            stopwatch.Stop();
            currentWord = String.Format("{0} seconds", stopwatch.ElapsedMilliseconds / 1000.0);
            gameOver = true;
        }
        else
        {
            currentWord = words.FirstOrDefault(w => w.Id == wordIndex).Typed;
            wordIndex++;
        }
        InvokeAsync(StateHasChanged);
    }

    // COUNTDOWN TIMER METHODS BELOW
    private void SetCountdownTimer()
    {
        // Create a timer with a one second interval.
        timer = new System.Timers.Timer(1000);
        // Hook up the Elapsed event for the timer.
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        if (countdown != 1)
        {
            countdown--;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            countdown--;
            GetWord();
            timer.Stop();
            timer.Dispose();

            stopwatch.Start();
        }
    }
}
