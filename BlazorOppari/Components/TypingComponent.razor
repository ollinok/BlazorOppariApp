@using DatabaseLib
@using BlazorOppari.Data
@using Microsoft.Extensions.Configuration
@using System.Timers
@using System.Linq
@using System.Diagnostics

@inject ISqlAccess _sql
@inject IConfiguration _config

<p style="font-size: 40px">
    @(countdown != 0 ? countdown : currentWord)
</p>

@if (!gameOver)
{
    <!-- Selitä bindit ja tuo onkeyup valinta -->
    <input style="height: 35px;margin-bottom: 1rem;" @bind="wordGuess" @bind:event="oninput" @onkeyup="@CheckGuess" />
}
else
{
    <p style="height: 35px">Nice job! Lowest: @lowestScore</p>

    <!-- Tähän EditFormi joka ottaa high scoren ja vie sen tietokantaan -->
    if (lowestScore <= totalTime)
    {
        <p>You didn't make the top list.</p>
    }
    else
    {
        <CascadingValue Value="totalTime" Name="TotalTime">
            <MadeTopListComponent RefreshTypingGame="@RefreshRequest"/>
        </CascadingValue>
    }
}

@code
{
    private static Timer timer;
    private Stopwatch stopwatch = new Stopwatch();

    private List<WordModel> words;
    private string wordGuess { get; set; }
    private string currentWord;
    private double totalTime;
    private int wordIndex = 1;

    private int countdown = 3;
    private bool gameOver;

    // From TypingGame.razor
    [CascadingParameter(Name = "LowestScore")]
    private double lowestScore { get; set; }

    // Callback from MadeTopListComponent.razor
    [Parameter]
    public EventCallback RefreshTypingGame { get; set; }

    private async void RefreshRequest()
    {
        await RefreshTypingGame.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from word";

        words = await _sql.LoadSqlData<WordModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

        SetCountdownTimer();
    }

    private void CheckGuess()
    {
        if (wordGuess == currentWord)
        {
            wordGuess = "";
            GetWord();
            InvokeAsync(StateHasChanged);
        }
    }

    private void GetWord()
    {
        if (wordIndex > words.Count)
        {
            stopwatch.Stop();
            currentWord = String.Format("{0} seconds", stopwatch.ElapsedMilliseconds / 1000.0);
            totalTime = stopwatch.ElapsedMilliseconds / 1000.0;
            gameOver = true;
        }
        else
        {
            currentWord = words.FirstOrDefault(w => w.Id == wordIndex).Typed;
            wordIndex++;
        }
        InvokeAsync(StateHasChanged);
    }

    // COUNTDOWN TIMER METHODS BELOW
    private void SetCountdownTimer()
    {
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    public void StopTimer()
    {
        if (timer.Enabled)
        {
            timer.Stop();
            timer.Dispose();
        }
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        if (countdown != 1)
        {
            countdown--;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            countdown--;
            GetWord();
            StopTimer();

            stopwatch.Start();
        }
    }
}
